// hooks/usePresenceCleanup.ts - VERSION SIMPLIFI√âE ET STABLE
// Hook pour nettoyer automatiquement les statuts obsol√®tes sans surcharger le syst√®me

import { useEffect, useCallback, useRef } from 'react';
import { supabase } from '@/lib/supabase';
import { useAuthContext } from '@/contexts/AuthContext';

export const usePresenceCleanup = () => {
  const { user } = useAuthContext();
  const cleanupIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const isRunningRef = useRef(false);

  /**
   * Nettoie les statuts de pr√©sence obsol√®tes de mani√®re intelligente
   * Cette fonction √©vite la surcharge en utilisant un approche minimaliste
   */
  const cleanupStalePresence = useCallback(async () => {
    // √âviter les ex√©cutions concurrentes
    if (isRunningRef.current || !user) return;
    
    isRunningRef.current = true;

    try {
      console.log('üßπ Nettoyage des statuts de pr√©sence obsol√®tes...');
      
      // Calculer la date limite (10 minutes dans le pass√© pour √©viter les faux positifs)
      const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
      
      // Mettre √† jour uniquement les utilisateurs vraiment inactifs
      // Cette approche est moins agressive que l'originale
      const { data, error } = await supabase
        .from('user_presence')
        .update({ 
          status: 'offline',
          updated_at: new Date().toISOString()
        })
        .eq('status', 'online') // Seulement ceux marqu√©s comme en ligne
        .lt('last_seen', tenMinutesAgo)
        .select('user_id');

      if (error) {
        console.error('Erreur lors du nettoyage de pr√©sence:', error);
        return;
      }

      if (data && data.length > 0) {
        console.log(`üì¥ ${data.length} utilisateur(s) marqu√©(s) comme hors ligne apr√®s inactivit√©`);
      }

    } catch (error) {
      console.error('Erreur inattendue lors du nettoyage:', error);
    } finally {
      isRunningRef.current = false;
    }
  }, [user]);

  /**
   * Nettoie les indicateurs de frappe expir√©s
   * Fonction simplifi√©e qui √©vite les conflits avec les autres op√©rations
   */
  const cleanupExpiredTypingIndicators = useCallback(async () => {
    if (!user || isRunningRef.current) return;

    try {
      console.log('‚å®Ô∏è Nettoyage des indicateurs de frappe expir√©s...');
      
      // Supprimer les indicateurs expir√©s (d√©lai plus long pour √©viter les suppressions pr√©matur√©es)
      const { data, error } = await supabase
        .from('typing_indicators')
        .delete()
        .lt('expires_at', new Date(Date.now() - 60000).toISOString()) // 1 minute de d√©lai
        .select('id');

      if (error) {
        console.error('Erreur lors du nettoyage des indicateurs de frappe:', error);
        return;
      }

      if (data && data.length > 0) {
        console.log(`üóëÔ∏è ${data.length} indicateur(s) de frappe supprim√©(s)`);
      }

    } catch (error) {
      console.error('Erreur inattendue lors du nettoyage des indicateurs:', error);
    }
  }, [user]);

  /**
   * Ex√©cute toutes les t√¢ches de nettoyage de mani√®re s√©quentielle
   * Cette approche √©vite les conflits et la surcharge du serveur
   */
  const runCleanupTasks = useCallback(async () => {
    if (!user || isRunningRef.current) return;

    try {
      // Ex√©cution s√©quentielle pour √©viter les conflits de base de donn√©es
      await cleanupStalePresence();
      
      // Petit d√©lai entre les op√©rations pour √©viter la surcharge
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await cleanupExpiredTypingIndicators();
    } catch (error) {
      console.error('Erreur lors de l\'ex√©cution des t√¢ches de nettoyage:', error);
    }
  }, [user, cleanupStalePresence, cleanupExpiredTypingIndicators]);

  /**
   * D√©marre le nettoyage automatique avec un intervalle raisonnable
   * Intervalle plus long pour r√©duire la charge serveur
   */
  useEffect(() => {
    if (!user) {
      // Nettoyer l'intervalle existant si plus d'utilisateur
      if (cleanupIntervalRef.current) {
        clearInterval(cleanupIntervalRef.current);
        cleanupIntervalRef.current = null;
      }
      return;
    }

    console.log('üöÄ D√©marrage du nettoyage automatique de pr√©sence');

    // Ex√©cuter imm√©diatement au d√©marrage (avec d√©lai pour √©viter les conflits d'initialisation)
    const initialCleanupTimeout = setTimeout(() => {
      runCleanupTasks();
    }, 5000); // 5 secondes apr√®s l'initialisation

    // Programmer l'ex√©cution r√©p√©t√©e toutes les 2 minutes (au lieu de 1 minute)
    // Cela r√©duit la charge serveur tout en maintenant l'efficacit√©
    cleanupIntervalRef.current = setInterval(() => {
      runCleanupTasks();
    }, 120000); // 2 minutes

    // Nettoyage √† la fermeture du composant
    return () => {
      clearTimeout(initialCleanupTimeout);
      
      if (cleanupIntervalRef.current) {
        clearInterval(cleanupIntervalRef.current);
        cleanupIntervalRef.current = null;
      }
    };
  }, [user, runCleanupTasks]);

  /**
   * Nettoyage manuel optimis√© pour les cas d'urgence
   * Cette fonction peut √™tre appel√©e depuis l'interface si n√©cessaire
   */
  const manualCleanup = useCallback(async () => {
    if (isRunningRef.current) {
      console.log('‚ö†Ô∏è Nettoyage d√©j√† en cours - op√©ration ignor√©e');
      return;
    }

    console.log('üöÄ Nettoyage manuel d√©clench√©');
    await runCleanupTasks();
  }, [runCleanupTasks]);

  /**
   * Nettoyage sp√©cifique pour l'utilisateur actuel lors de la d√©connexion
   * Cette fonction est plus cibl√©e et √©vite les op√©rations inutiles
   */
  const cleanupCurrentUser = useCallback(async () => {
    if (!user) return;

    try {
      console.log('üëã Nettoyage pour utilisateur actuel:', user.id);
      
      // Marquer l'utilisateur actuel comme hors ligne
      const { error } = await supabase
        .from('user_presence')
        .update({ 
          status: 'offline',
          last_seen: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('user_id', user.id);

      if (error) {
        console.error('Erreur lors de la mise √† jour du statut utilisateur:', error);
      } else {
        console.log('‚úÖ Utilisateur actuel marqu√© comme hors ligne');
      }

    } catch (error) {
      console.error('Erreur lors du nettoyage de l\'utilisateur actuel:', error);
    }
  }, [user]);

  /**
   * Gestionnaire pour la fermeture de la page/onglet
   * Assure que l'utilisateur est marqu√© comme hors ligne
   */
  useEffect(() => {
    if (!user) return;

    const handleBeforeUnload = () => {
      // Utiliser sendBeacon pour un envoi fiable lors de la fermeture
      if (navigator.sendBeacon) {
        const data = new FormData();
        data.append('user_id', user.id);
        data.append('action', 'logout');
        
        // Note: Ceci n√©cessiterait un endpoint d√©di√© c√¥t√© serveur
        // Pour l'instant, on utilise la m√©thode classique
      }
      
      // Fallback classique
      cleanupCurrentUser();
    };

    const handleVisibilityChange = () => {
      if (document.hidden) {
        // L'utilisateur a chang√© d'onglet ou minimis√©
        // On peut le marquer comme "away" au lieu de "offline"
        if (user) {
          supabase
            .from('user_presence')
            .update({ 
              status: 'away',
              last_seen: new Date().toISOString()
            })
            .eq('user_id', user.id)
            .then(() => console.log('üëÅÔ∏è Utilisateur marqu√© comme absent'));
        }
      } else {
        // L'utilisateur est revenu
        if (user) {
          supabase
            .from('user_presence')
            .update({ 
              status: 'online',
              last_seen: new Date().toISOString()
            })
            .eq('user_id', user.id)
            .then(() => console.log('üëÅÔ∏è Utilisateur marqu√© comme en ligne'));
        }
      }
    };

    // √âcouteurs d'√©v√©nements pour la gestion de la pr√©sence
    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [user, cleanupCurrentUser]);

  return {
    // Fonction principale pour nettoyage manuel
    manualCleanup,
    
    // Fonctions sp√©cialis√©es (expos√©es pour les cas d'usage avanc√©s)
    cleanupStalePresence,
    cleanupExpiredTypingIndicators,
    cleanupCurrentUser,
    
    // √âtat de statut (utile pour l'UI)
    isRunning: isRunningRef.current
  };
};